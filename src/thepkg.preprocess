#!/usr/bin/env pp
#!/bin/sh
set -eu

: "${THEPKG_PREFIX:=""}"
: "${THEPKG_DBPATH:="$THEPKG_PREFIX/var/db/thepkg"}"
!| case ${THEPKGCONFIG_SUBDIR_PREFIX+x} in x)
: "${THEPKG_SUBDIR_PREFIX:=""}"
!! esac

# env parsing:
!| case ${THEPKGCONFIG_SUBDIR_PREFIX+x} in x)
case $THEPKG_SUBDIR_PREFIX in /*) err "env var \$THEPKG_SUBDIR_PREFIX is not allowed to be in /*"; esac
!! esac

# thepkg reqired dir / files:
[ -d "${THEPKG_PREFIX?}" ] || mkdir -pv "${THEPKG_PREFIX:-/}"
[ -d "${THEPKG_DBPATH?}" ] || mkdir -pv "$THEPKG_DBPATH"
!| case ${THEPKGCONFIG_SUBDIR_PREFIX+x} in x)
case ${THEPKG_SUBDIR_PREFIX:+x} in x)
	[ -d "$THEPKG_PREFIX/$THEPKG_SUBDIR_PREFIX" ] || \
	mkdir -pv "${THEPKG_PREFIX:-/}/$THEPKG_SUBDIR_PREFIX"
esac
!! esac


# log fns:
log() { printf %s\\n >&2 " -> $1"; }
!| case ${THEPKGCONFIG_NOERR_STAT0+x} in x)
err() { printf %s\\n >&2 " x> $1"; [ ${2-2} -eq 0 ] || exit ${2-2}; }
!| 	;; *)
err() { printf %s\\n >&2 " x> $1"; exit ${2-2}; } # [patch: thepkgconfig_noerr_stat0]
!! esac


# args parsing:
case ${1-} in
	-h|--help)
		printf %s\\n \
			"Usage: <STDIN thepkgname.tar> | ${0##*/} <add|del> <thepkgname>" \
!| case ${THEPKGCONFIG__ALLPATCHED__+x} in x)
			"       ${0##*/} <add|del> </path/to/thepkgname[@version].tar.qz>" \
			"" \
			"features enabled:" \
			"  (not tested)" \
			"  [thepkgconfig_addfromtar]" \
			"    install from tar and use (tar -a) autodetect if its for example '.tar.gz'/'.tar.*'/'.tar'." \
			"    arg may be: </path/to/thepkgname.tar.qz>" \
			"" \
			"  (not done)" \
			"  [thepkgconfig_thepkgver_arg_parsing]" \
			"    thepkgname may be <thepkgname@v1.0.0>" \
			"" \
			"  (not done)" \
			"  [thepkgconfig_subdir_prefix]" \
			"    use env var \$THEPKG_SUBDIR_PREFIX as \$THEPKG_PREFIX sub dir," \
			"    but stil write it to \$THEPKG_DBPATH/manifest file" \
			"" \
			"  (internal)" \
			"  (not done at all)" \
			"  [thepkgconfig_args_parsing_loop]" \
			"    prepare code for args parsing patches" \
			"" \
			"  (requires: thepkg-args-parsing-loop)" \
			"  (not done at all)" \
			"  [thepkgconfig_metadata]" \
			"    when thepkgname is in (*.thepkg.*|*.thepkg) or --metadata used. then metadata is read from the start of the file" \
			"" \
			"  (not even started / just a plan)" \
			"  [thepkgconfig_keep_etc]" \
			"    keep files from /env, exept when --nosave is specifyed" \
			"" \
			"  (not done at all)" \
			"  [thepkgconfig_metadata_thepkg_ext]" \
			"    parse '*.thepkg' file that contains metadata about the package" \
			"    used only when extention is (*.thepkg) or when --thepkg-metadata specifyed" \
			"    .thepkg file is tar file with prepended metadata prepended data" \
			"" \
			"  (not done at all)" \
			"  [thepkgconfig_upgrade]" \
			"    upgrade package" \
			"" \
			"  (done)" \
			"  (internal)" \
			"  [thepkgconfig_noerr_stat0]" \
			"    err fn to not exit when \$2=0" \
			"" \
			"  (done)" \
			"  (requires: thepkgconfig_noerr_stat0)" \
			"  [thepkgconfig_extended_verbose]" \
			"    (1 for now!) print longer messages" \
			"" \
			"  (writing ! -> testing )" \
			"  [thepkgconfig_rmfailed]" \
			"     when removing files failed," \
			"     then keep manifest.rmfailed" \
!! esac
		;
		exit
	;;
	'') err "please specify action add/del or see --help";;
esac

# thepkg args parsing loop:
!| case ${THEPKGCONFIG_ARGS_PARSING_LOOP+x} in x|'') # note: unimplemented patch
# [patch: thepkg-args-parsing-loop] TODO: thepkg args parsing loop
!! esac

case $1 in
	add|del) action=$1; shift;;
	-*) err "unknown option '$1'. see --help";;
	*)  err "unknown action '$1'. see --help";;
esac

# thepkg file detection:
!| case ${THEPKGCONFIG_ADDFROMTAR+x} in x)
unset tar_file
!! esac
case $1 in
'')
	err "please specify thepkgname or see --help"
	;;
!| case ${THEPKGCONFIG_ADDFROMTAR+x} in x)
*/*|/*.tar|./*.tar|/*.tar.*|./*.tar.*)
	# note: for `thepkg del thepkgname.tar`
	# will not look at the tar file at all,
	# just detects the name from the name
	tar_file=$1
	thepkgname=${1%%".tar"*}
	;;
!! esac
[!-]*)
	thepkgname=${1##*/}
	;;
esac


# thepkg post file detection:
!| case ${THEPKGCONFIG_THEPKGVER_ARG_PARSING+x} in x)
thepkgver=${thepkgname#*"@"}
thepkgname=${thepkgname%"@$thepkgver"}
!! esac

# thepkg action detection:
case $action in
add)
	[ ! -e "$THEPKG_DBPATH/$thepkgname" ] || {
		err "The pkg '$thepkgname' is already installed" 3
!| case ${THEPKGCONFIG_UPGRADE+x} in x)
		# TODO: # [patch: thepkg-upgrade] add action -> already installed
!! esac
	}
	log "Extracting the pkg '$thepkgname'..."
	mkdir -v "$THEPKG_DBPATH/$thepkgname"

	# manifest writing:
	{
		{
			# tar -k    don't replace existing files, treat them as errors

			# tar opts:
			tar_opts=k
!| case ${THEPKGCONFIG_ADDFROMTAR+x} in x)
			tar_opts=${tar_opts}a
!! esac

!| case ${THEPKGCONFIG_ADDFROMTAR+x} in '')
			tar_file=-
!| 	;; *)
			tar_file=${tar_file:-"-"}
!! esac

!| case ${THEPKGCONFIG_SUBDIR_PREFIX+x} in '')
			tar_directory=${THEPKG_PREFIX:-/}
!| 	;; *)
			tar_directory=${THEPKG_PREFIX:-/}/$THEPKG_SUBDIR_PREFIX
!! esac

			# manifest writing -> pre tar extractind
			tar -xvf "$tar_file" -"$tar_opts" -C "$tar_directory"

		# manifest writing -> post tar extractind
!| case ${THEPKGCONFIG_SUBDIR_PREFIX+x} in x)
		} | {
			case $THEPKG_SUBDIR_PREFIX in
			'')
				cat
				;;
			*)
				while IFS= read -r file; do printf %s\\n "$THEPKG_SUBDIR_PREFIX/$file"; done
				case $file in ?*) printf %s\\n "$THEPKG_SUBDIR_PREFIX/$file"; esac
				;;
			esac
!! esac
		} | {
			tee /dev/stderr
		} | {
			# manifest writing -> pre sort
			sort -r
			# manifest writing -> post sort
		}
	} > "$THEPKG_DBPATH/$thepkgname"/manifest
	# post manifest, metadata writing:
!| case ${THEPKGCONFIG_METADATA_THEPKG_EXT+x} in x)
	# TODO: # [patch: thepkg-metadata-thepkg-ext] post manifest, metadata writing
!! esac
!| case ${THEPKGCONFIG_THEPKGVER_ARG_PARSING+x} in x)
	case ${thepkgver:+x} in
		x) printf "$thepkgver" > "$THEPKG_DBPATH/$thepkgname"/version
	esac
!! esac

	# thepkg post install:
!| case ${THEPKGCONFIG_ADDFROMTAR+x} in x)
	# TODO: # [patch: thepkg-addfromtar] thepkg post install
!! esac

	# test -s   exists and has a size greater than zero
	[ -s "$THEPKG_DBPATH/$thepkgname"/manifest ] || {
!| case ${THEPKGCONFIG_EXTENDED_VERBOSE+x} in '')
		err "empty or missing manifest file." 3
!| 	;; *)
		# detect when went wrong
		# reason: `tar` is ran in pipe
		# and exit status is lost in POSIX sh
		# then exit status would be 0

		printf ' x> %s\n' >&2 \
			"Extracding the pkg went wrong." \
			"To remove the empty pkg installed," \
			"  please run: ${0##*/} del '$thepkgname'" \
		;
		exit 3
!! esac
	}
	;;
del)
	[ -e "$THEPKG_DBPATH/$thepkgname" ] || {
		err "The pkg '$thepkgname' is not installed" 2
	}
	manifest_path=$THEPKG_DBPATH/$thepkgname/manifest

	# thepkg pre del
!| case ${THEPKGCONFIG_RMFAILED+x} in x)
	unset _patch_thepkg_rmfailed__exit_on_fail
	if [ -e "$manifest_path.rmfailed" ]; then
		manifest_path=$manifest_path.rmfailed
		_patch_thepkg_rmfailed__exit_on_fail=''
		###err "The pkg '$thepkgname' haven not been removed last time" 2 # todo: is this good error message
	fi
!! esac
	
	log "Removing the pkg '$thepkgname'..."
	(
		cd "${THEPKG_PREFIX:-/}" || exit
		while IFS= read -r file || case $file in '') false; esac; do
			case $file in
!| case ${THEPKGCONFIG_KEEP_ETC+x} in x)
				# TODO: # [patch: thepkg-keep-etc] del action -> case
!! esac
				*/)
					rmdir "$file" 2>/dev/null || :
				;;
				*)
					rm -v "$file" || {
						# thepkg del rm failed
!| case ${THEPKGCONFIG_RMFAILED+x} in x)
						case ${_patch_thepkg_rmfailed__exit_on_fail+x} in
							x) false;;
							*) printf %s\\n "$file" >> "$THEPKG_DBPATH/$thepkgname"/manifest.rmfailed;;
						esac || \
!! 	esac
						false
					}
				;;
			esac
		done
	) < "$manifest_path"
	
	rm -v "$manifest_path"


	# thepkg post manifest removal:
!| case ${THEPKGCONFIG_METADATA_THEPKG_EXT+x} in x)
	# TODO: # [patch: thepkg-metadata-thepkg-ext] thepkg post manifest removal
!! esac
!!#
!| case ${THEPKGCONFIG_THEPKGVER_ARG_PARSING+x} in x)
	[ -e "$THEPKG_DBPATH/$thepkgname"/version ] && rm -v "$THEPKG_DBPATH/$thepkgname"/version
!! esac

	rmdir -v "$THEPKG_DBPATH/$thepkgname"
	;;
*) err "unknown: '$1'";;
esac
