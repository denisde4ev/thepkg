#!/bin/sh

# : "${THEPKG_PREFIX=/data/data/com.termux/files/home/0/thepkg/test}"
: "${THEPKG_PREFIX:="$HOME"}"
: "${THEPKG_DBPATH:="/var/db/thepkg"}"
##1##: "${THEPKG_SUBDIR_PREFIX:=".local"}"

set -e

[ -d "${THEPKG_PREFIX:?}" ] || mkdir -pv "$THEPKG_PREFIX"
[ -d "${THEPKG_DBPATH:?}" ] || mkdir -pv "$THEPKG_DBPATH"

log() { printf %s\\n " -> $1"; }
err() { printf %s\\n >&2 " x> $1"; exit ${2-2}; }

# env parsing:
##1##case $THEPKG_SUBDIR_PREFIX in /*) err "env var \$THEPKG_SUBDIR_PREFIX is not allowed to be in /*"; esac
# todo: consider: escaping THEPKG_SUBDIR_PREFIX var for the sed commad

# args parsing:
case $1 in
	-h|--help) printf %s\\n \
		"Usage: ${0##*/} <add|del> </path/to/thepkgname.tar.qz | thepkgname.tar | thepkgname>" \
		"" \
		"patches applyed: (in reverse order)" \
		" (not done) thepkg-version-from-args: thepkgname may be </path/to/thepkgname@v1.0.0.tar.qz | thepkgname@v1.0.0.tar | thepkgname@v1.0.0>" \
		"##1##comented# (not done) thepkg-subdir-prefix: use env var \$THEPKG_SUBDIR_PREFIX as \$THEPKG_PREFIX sub dir, but stil write it to \$THEPKG_DBPATH/manifest file" \
		;
		# : " (not done at all) [requires: thepkg-args-parsing] thepkg-metadata: when thepkgname is in (*.thepkg.*|*.thepkg) or --metadata used. then metadata is read from the start of the file" \
		# : " (not done at all) (internal) thepkg-args-parsing: prepare code for args parsing patches" \
		exit;;
	'') err "please specify action add/del or see --help";;
esac

# thepkg args parsing loop:
# [path: thepkg-args-parsing] thepkg args parsing loop

case $1 in
	add|del) action=$1;;
	-*) err "unknown option='$1'. see --help";;
	*)  err "unknown action='$1'. see --help";;
esac
shift

# thepkg file detection:
thepkgname=${1##*/}
unset tar_file # TODO:! separate this to exteral path, and pure thepkg command to install only from pipe: (this lines, help message 2 lines, remove fallback the installation)
case $1 in
'')
	err "please specify thepkgname or see --help";;
*/*|/*.tar|./*.tar|/*.tar.*|./*.tar.*)
	# note: for `thepkg del thepkgname.tar`
	# will not look at the tar file at all,
	# just detects the name from the name
	tar_file=$1
	thepkgname=${thepkgname%%".tar"*}
;;
esac


# thepkg post file detection:
##2##todo:! saparate::	# [path: thepkg-args-parsing]: thepkg post file detection
thepkgver=${thepkgname#*"@"}
thepkgname=${thepkgname%"@$thepkgver"}


# thepkg action detection:
case $action in
add)
	[ ! -e "$THEPKG_DBPATH/$thepkgname" ] || {
		err "The pkg '$thepkgname' is already installed" 2
	}
	log "Extracting the pkg '$thepkgname'..."
	mkdir -v "$THEPKG_DBPATH/$thepkgname"
	# tar -k    donâ€™t replace existing files, treat them as errors
	tar -axvf "${tar_file-"-"}" -k -C "$THEPKG_PREFIX" | tee /dev/stderr | \
	sort -r > "$THEPKG_DBPATH/$thepkgname"/manifest

	# thepkg post install:
##2##todo:! saparate::	# [path: thepkg-args-parsing]: thepkg post install
	case ${thepkgver:+x} in
		x) $thepkgver > "$THEPKG_DBPATH/$thepkgname"/manifest
	esac

	# test -s   exists and has a size greater than zero
	[ -s "$THEPKG_DBPATH/$thepkgname"/manifest ] || {
		# detect when went wrong
		# reason: `tar` is ran in pipe
		# and exit status is lost in POSIX sh
		# then exit status would be 0

		printf ' x> %s\n' >&2 \
			"Extracding the pkg went wrong." \
			"To remove the empty pkg installed," \
			"  please run: ${0##*/} del '$thepkgname'" \
		;
		exit 3
	}
	;;
del)
	[ -e "$THEPKG_DBPATH/$thepkgname" ] || {
		err "The pkg '$thepkgname' is not installed" 2
	}
	log "Removing the pkg '$thepkgname'..."
	(
		cd "$THEPKG_PREFIX" || exit
		while IFS= read -r file; do
			case $file in
				*/) rmdir -v "$file" 2>/dev/null||:;;
				*) rm -v "$file";;
			esac
		done
	) < "$THEPKG_DBPATH/$thepkgname"/manifest
	rm -v "$THEPKG_DBPATH/$thepkgname"/manifest
	rmdir -v "$THEPKG_DBPATH/$thepkgname"
	;;
*) err "use --help";;
esac
